{"version":3,"sources":["TabBar.tsx"],"names":["React","StyleSheet","View","I18nManager","Platform","Animated","TabBarItem","TabBarIndicator","memoize","scheduleInNextFrame","cb","frame","requestAnimationFrame","cancelAnimationFrame","TabBar","Component","layout","width","height","tabWidths","Value","createRef","undefined","style","tabStyle","flatten","index","routes","scrollEnabled","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","i","getComputedTabWidth","tabBarWidth","layoutWidth","props","state","navigationState","reduce","acc","_","getFlattenedTabWidth","value","getTabBarWidth","maxDistance","getMaxScrollDistance","scrollValue","Math","max","min","OS","isRTL","centerDistance","Array","from","total","tabWidth","scrollAmount","normalizeScrollValue","scrollView","scrollViewRef","current","scrollTo","getNode","x","getScrollAmount","animated","e","nativeEvent","cancelNextFrameCb","setState","maxScrollDistance","multiply","sub","componentDidUpdate","prevProps","prevState","every","r","resetScroll","componentWillUnmount","render","position","jumpTo","bounces","getAccessibilityLabel","getAccessible","getLabelText","getTestID","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","getTranslateX","handleLayout","styles","tabBar","indicatorContainer","transform","renderIndicator","getTabWidth","getMemoizedTabWidthGettter","scroll","tabContent","container","event","contentOffset","map","route","onLayout","measuredTabWidths","onPress","defaultPrevented","preventDefault","onLongPress","title","toUpperCase","accessible","accessibilityLabel","testID","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,UADF,EAEEC,IAFF,EAOEC,WAPF,EAQEC,QARF,QASO,cATP;AAUA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAqD,cAArD;AACA,OAAOC,eAAP,MAAyD,mBAAzD;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAsDA,MAAMC,mBAAmB,GAAIC,EAAD,IAAoB;AAC9C,MAAIC,KAAK,GAAGC,qBAAqB,CAAC,MAAM;AACtCD,IAAAA,KAAK,GAAGC,qBAAqB,CAACF,EAAD,CAA7B;AACD,GAFgC,CAAjC;AAIA,SAAO,MAAMG,oBAAoB,CAACF,KAAD,CAAjC;AACD,CAND;;AAQA,eAAe,MAAMG,MAAN,SAAsCd,KAAK,CAACe,SAA5C,CAGb;AAAA;AAAA;;AAAA,mCAkBe;AACbC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OADK;AAEbC,MAAAA,SAAS,EAAE;AAFE,KAlBf;;AAAA,+CAyDuD,EAzDvD;;AAAA,0CA2DuB,IAAId,QAAQ,CAACe,KAAb,CAAmB,CAAnB,CA3DvB;;AAAA,wDA6DwBpB,KAAK,CAACqB,SAAN,EA7DxB;;AAAA,+CA+DsDC,SA/DtD;;AAAA,kDAiEgCC,KAAD,IAAiC;AAC9D,YAAMC,QAAQ,GAAGvB,UAAU,CAACwB,OAAX,CAAmBF,KAAnB,CAAjB;AAEA,aAAOC,QAAQ,GAAGA,QAAQ,CAACP,KAAZ,GAAoBK,SAAnC;AACD,KArED;;AAAA,iDAuE8B,CAC5BI,KAD4B,EAE5BV,MAF4B,EAG5BW,MAH4B,EAI5BC,aAJ4B,EAK5BT,SAL4B,EAM5BU,cAN4B,KAOzB;AACH,UAAIA,cAAc,KAAK,MAAvB,EAA+B;AAC7B,eAAOV,SAAS,CAACQ,MAAM,CAACD,KAAD,CAAN,CAAcI,GAAf,CAAT,IAAgC,CAAvC;AACD;;AAED,cAAQ,OAAOD,cAAf;AACE,aAAK,QAAL;AACE,iBAAOA,cAAP;;AACF,aAAK,QAAL;AACE,cAAIA,cAAc,CAACE,QAAf,CAAwB,GAAxB,CAAJ,EAAkC;AAChC,kBAAMd,KAAK,GAAGe,UAAU,CAACH,cAAD,CAAxB;;AACA,gBAAII,MAAM,CAACC,QAAP,CAAgBjB,KAAhB,CAAJ,EAA4B;AAC1B,qBAAOD,MAAM,CAACC,KAAP,IAAgBA,KAAK,GAAG,GAAxB,CAAP;AACD;AACF;;AATL;;AAYA,UAAIW,aAAJ,EAAmB;AACjB,eAAQZ,MAAM,CAACC,KAAP,GAAe,CAAhB,GAAqB,CAA5B;AACD;;AAED,aAAOD,MAAM,CAACC,KAAP,GAAeU,MAAM,CAACQ,MAA7B;AACD,KApGD;;AAAA,wDAsGqC3B,OAAO,CAC1C,CACEQ,MADF,EAEEW,MAFF,EAGEC,aAHF,EAIET,SAJF,EAKEU,cALF,KAMMO,CAAD,IACH,KAAKC,mBAAL,CACED,CADF,EAEEpB,MAFF,EAGEW,MAHF,EAIEC,aAJF,EAKET,SALF,EAMEU,cANF,CARwC,CAtG5C;;AAAA,kDAwH+B,CAACS,WAAD,EAAsBC,WAAtB,KAC7BD,WAAW,GAAGC,WAzHhB;;AAAA,4CA2HyB,CAACC,KAAD,EAAkBC,KAAlB,KAAmC;AAC1D,YAAM;AAAEzB,QAAAA,MAAF;AAAUG,QAAAA;AAAV,UAAwBsB,KAA9B;AACA,YAAM;AAAEb,QAAAA,aAAF;AAAiBJ,QAAAA;AAAjB,UAA8BgB,KAApC;AACA,YAAM;AAAEb,QAAAA;AAAF,UAAaa,KAAK,CAACE,eAAzB;AAEA,aAAOf,MAAM,CAACgB,MAAP,CACL,CAACC,GAAD,EAAMC,CAAN,EAAST,CAAT,KACEQ,GAAG,GACH,KAAKP,mBAAL,CACED,CADF,EAEEpB,MAFF,EAGEW,MAHF,EAIEC,aAJF,EAKET,SALF,EAME,KAAK2B,oBAAL,CAA0BtB,QAA1B,CANF,CAHG,EAWL,CAXK,CAAP;AAaD,KA7ID;;AAAA,kDA+I+B,CAC7BgB,KAD6B,EAE7BC,KAF6B,EAG7BM,KAH6B,KAI1B;AACH,YAAM;AAAE/B,QAAAA;AAAF,UAAayB,KAAnB;AACA,YAAMH,WAAW,GAAG,KAAKU,cAAL,CAAoBR,KAApB,EAA2BC,KAA3B,CAApB;AACA,YAAMQ,WAAW,GAAG,KAAKC,oBAAL,CAA0BZ,WAA1B,EAAuCtB,MAAM,CAACC,KAA9C,CAApB;AACA,YAAMkC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASP,KAAT,EAAgBE,WAAhB,CAAT,EAAuC,CAAvC,CAApB;;AAEA,UAAI7C,QAAQ,CAACmD,EAAT,KAAgB,SAAhB,IAA6BpD,WAAW,CAACqD,KAA7C,EAAoD;AAClD;AACA;AACA,eAAOP,WAAW,GAAGE,WAArB;AACD;;AAED,aAAOA,WAAP;AACD,KAhKD;;AAAA,6CAkK0B,CAACX,KAAD,EAAkBC,KAAlB,EAAgCf,KAAhC,KAAkD;AAC1E,YAAM;AAAEV,QAAAA,MAAF;AAAUG,QAAAA;AAAV,UAAwBsB,KAA9B;AACA,YAAM;AAAEb,QAAAA,aAAF;AAAiBJ,QAAAA;AAAjB,UAA8BgB,KAApC;AACA,YAAM;AAAEb,QAAAA;AAAF,UAAaa,KAAK,CAACE,eAAzB;AAEA,YAAMe,cAAc,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAExB,QAAAA,MAAM,EAAET,KAAK,GAAG;AAAlB,OAAX,EAAkCiB,MAAlC,CACrB,CAACiB,KAAD,EAAQf,CAAR,EAAWT,CAAX,KAAiB;AACf,cAAMyB,QAAQ,GAAG,KAAKxB,mBAAL,CACfD,CADe,EAEfpB,MAFe,EAGfW,MAHe,EAIfC,aAJe,EAKfT,SALe,EAMf,KAAK2B,oBAAL,CAA0BtB,QAA1B,CANe,CAAjB,CADe,CAUf;AACA;;AACA,eAAOoC,KAAK,IAAIlC,KAAK,KAAKU,CAAV,GAAcyB,QAAQ,GAAG,CAAzB,GAA6BA,QAAjC,CAAZ;AACD,OAdoB,EAerB,CAfqB,CAAvB;AAkBA,YAAMC,YAAY,GAAGL,cAAc,GAAGzC,MAAM,CAACC,KAAP,GAAe,CAArD;AAEA,aAAO,KAAK8C,oBAAL,CAA0BvB,KAA1B,EAAiCC,KAAjC,EAAwCqB,YAAxC,CAAP;AACD,KA5LD;;AAAA,yCA8LuBpC,KAAD,IAAmB;AACvC,UAAI,KAAKc,KAAL,CAAWZ,aAAf,EAA8B;AAAA;;AAC5B;AACA,cAAMoC,UAAU,GACd;AACA,yCAAO,KAAKC,aAAL,CAAmBC,OAA1B,0DAAO,sBAA4BC,QAAnC,MAAgD,UAAhD,GACI,KAAKF,aAAL,CAAmBC,OADvB,6BAEI,KAAKD,aAAL,CAAmBC,OAFvB,2DAEI,uBAA4BE,OAA5B,EAJN,CAF4B,CAQ5B;;AACAJ,QAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEG,QAAZ,CAAqB;AACnBE,UAAAA,CAAC,EAAE,KAAKC,eAAL,CAAqB,KAAK9B,KAA1B,EAAiC,KAAKC,KAAtC,EAA6Cf,KAA7C,CADgB;AAEnB6C,UAAAA,QAAQ,EAAE;AAFS,SAArB;AAID;AACF,KA7MD;;AAAA,0CA+MwBC,CAAD,IAA0B;AAAA;;AAC/C,YAAM;AAAEtD,QAAAA,MAAF;AAAUD,QAAAA;AAAV,UAAoBuD,CAAC,CAACC,WAAF,CAAczD,MAAxC;;AAEA,UACE,KAAKyB,KAAL,CAAWzB,MAAX,CAAkBC,KAAlB,KAA4BA,KAA5B,IACA,KAAKwB,KAAL,CAAWzB,MAAX,CAAkBE,MAAlB,KAA6BA,MAF/B,EAGE;AACA;AACD,OAR8C,CAU/C;AACA;AACA;AACA;;;AACA,oCAAKwD,iBAAL;AACA,WAAKA,iBAAL,GAAyBjE,mBAAmB,CAAC,MAC3C,KAAKkE,QAAL,CAAc;AACZ3D,QAAAA,MAAM,EAAE;AACNE,UAAAA,MADM;AAEND,UAAAA;AAFM;AADI,OAAd,CAD0C,CAA5C;AAQD,KAtOD;;AAAA,2CAwOwBT,OAAO,CAC7B,CAACsD,YAAD,EAAsCc,iBAAtC,KACEvE,QAAQ,CAACwE,QAAT,CACEzE,QAAQ,CAACmD,EAAT,KAAgB,SAAhB,IAA6BpD,WAAW,CAACqD,KAAzC,GACInD,QAAQ,CAACyE,GAAT,CAAaF,iBAAb,EAAgCd,YAAhC,CADJ,GAEIA,YAHN,EAIE3D,WAAW,CAACqD,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAJ3B,CAF2B,CAxO/B;AAAA;;AAuBAuB,EAAAA,kBAAkB,CAACC,SAAD,EAAsBC,SAAtB,EAAwC;AACxD,UAAM;AAAEvC,MAAAA;AAAF,QAAsB,KAAKF,KAAjC;AACA,UAAM;AAAExB,MAAAA,MAAF;AAAUG,MAAAA;AAAV,QAAwB,KAAKsB,KAAnC;;AAEA,QACEuC,SAAS,CAACtC,eAAV,CAA0Bf,MAA1B,CAAiCQ,MAAjC,KACEO,eAAe,CAACf,MAAhB,CAAuBQ,MADzB,IAEA6C,SAAS,CAACtC,eAAV,CAA0BhB,KAA1B,KAAoCgB,eAAe,CAAChB,KAFpD,IAGAuD,SAAS,CAACjE,MAAV,CAAiBC,KAAjB,KAA2BD,MAAM,CAACC,KAHlC,IAIAgE,SAAS,CAAC9D,SAAV,KAAwBA,SAL1B,EAME;AACA,UACE,KAAK2B,oBAAL,CAA0B,KAAKN,KAAL,CAAWhB,QAArC,MAAmD,MAAnD,IACA,EACER,MAAM,CAACC,KAAP,IACAyB,eAAe,CAACf,MAAhB,CAAuBuD,KAAvB,CACGC,CAAD,IAAO,OAAOhE,SAAS,CAACgE,CAAC,CAACrD,GAAH,CAAhB,KAA4B,QADrC,CAFF,CAFF,EAQE;AACA;AACA;AACD;;AAED,WAAKsD,WAAL,CAAiB1C,eAAe,CAAChB,KAAjC;AACD;AACF;;AAED2D,EAAAA,oBAAoB,GAAG;AAAA;;AACrB,mCAAKX,iBAAL;AACD,GArDD,CAuDA;AACA;;;AA0LAY,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,QADI;AAEJ7C,MAAAA,eAFI;AAGJ8C,MAAAA,MAHI;AAIJ5D,MAAAA,aAJI;AAKJ6D,MAAAA,OALI;AAMJC,MAAAA,qBANI;AAOJC,MAAAA,aAPI;AAQJC,MAAAA,YARI;AASJC,MAAAA,SATI;AAUJC,MAAAA,WAVI;AAWJC,MAAAA,UAXI;AAYJC,MAAAA,WAZI;AAaJC,MAAAA,gBAbI;AAcJC,MAAAA,WAdI;AAeJC,MAAAA,aAfI;AAgBJC,MAAAA,UAhBI;AAiBJC,MAAAA,YAjBI;AAkBJC,MAAAA,UAlBI;AAmBJC,MAAAA,cAnBI;AAoBJ/E,MAAAA,QApBI;AAqBJgF,MAAAA,UArBI;AAsBJC,MAAAA,cAtBI;AAuBJC,MAAAA,qBAvBI;AAwBJnF,MAAAA,KAxBI;AAyBJoF,MAAAA;AAzBI,QA0BF,KAAKnE,KA1BT;AA2BA,UAAM;AAAExB,MAAAA,MAAF;AAAUG,MAAAA;AAAV,QAAwB,KAAKsB,KAAnC;AACA,UAAM;AAAEd,MAAAA;AAAF,QAAae,eAAnB;AAEA,UAAMkE,cAAc,GAAG,KAAK9D,oBAAL,CAA0BtB,QAA1B,MAAwC,MAA/D;AACA,UAAMc,WAAW,GAAG,KAAKU,cAAL,CAAoB,KAAKR,KAAzB,EAAgC,KAAKC,KAArC,CAApB;AACA,UAAMoE,kBAAkB,aAAMlF,MAAM,CAACQ,MAAP,GAAgB,EAAtB,MAAxB;AACA,UAAM2E,UAAU,GAAG,KAAKC,aAAL,CACjB,KAAKjD,YADY,EAEjB,KAAKZ,oBAAL,CAA0BZ,WAA1B,EAAuCtB,MAAM,CAACC,KAA9C,CAFiB,CAAnB;AAKA,wBACE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,QAAQ,EAAE,KAAK+F,YADjB;AAEE,MAAA,KAAK,EAAE,CAACC,MAAM,CAACC,MAAR,EAAgB3F,KAAhB;AAFT,oBAIE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,aAAa,EAAC,MADhB;AAEE,MAAA,KAAK,EAAE,CACL0F,MAAM,CAACE,kBADF,EAELvF,aAAa,GAAG;AAAEwF,QAAAA,SAAS,EAAE,CAAC;AAAEN,UAAAA;AAAF,SAAD;AAAb,OAAH,GAA4C,IAFpD,EAGLxE,WAAW,GACP;AAAErB,QAAAA,KAAK,EAAEqB;AAAT,OADO,GAEPV,aAAa,GACb;AAAEX,QAAAA,KAAK,EAAE4F;AAAT,OADa,GAEb,IAPC,EAQLF,uBARK;AAFT,OAaG,KAAKnE,KAAL,CAAW6E,eAAX,CAA2B;AAC1B9B,MAAAA,QAD0B;AAE1BvE,MAAAA,MAF0B;AAG1B0B,MAAAA,eAH0B;AAI1B8C,MAAAA,MAJ0B;AAK1BvE,MAAAA,KAAK,EAAE2F,cAAc,GAAG,MAAH,aAAe,MAAMjF,MAAM,CAACQ,MAA5B,MALK;AAM1BZ,MAAAA,KAAK,EAAEkF,cANmB;AAO1Ba,MAAAA,WAAW,EAAE,KAAKC,0BAAL,CACXvG,MADW,EAEXW,MAFW,EAGXC,aAHW,EAIXT,SAJW,EAKX,KAAK2B,oBAAL,CAA0BtB,QAA1B,CALW;AAPa,KAA3B,CAbH,CAJF,eAiCE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEyF,MAAM,CAACO;AAApB,oBACE,oBAAC,QAAD,CAAU,UAAV;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,iBAAiB,EAAC,SAFpB;AAGE,MAAA,yBAAyB,EAAC,SAH5B;AAIE,MAAA,aAAa,EAAE5F,aAJjB;AAKE,MAAA,OAAO,EAAE6D,OALX;AAME,MAAA,sBAAsB,EAAE,KAN1B;AAOE,MAAA,YAAY,EAAE,KAPhB;AAQE,MAAA,8BAA8B,EAAE,KARlC;AASE,MAAA,gCAAgC,EAAE,KATpC;AAUE,MAAA,cAAc,EAAC,OAVjB;AAWE,MAAA,qBAAqB,EAAE,CACrBwB,MAAM,CAACQ,UADc,EAErB7F,aAAa,GACT;AAAEX,QAAAA,KAAK,EAAEqB,WAAW,IAAIuE;AAAxB,OADS,GAETI,MAAM,CAACS,SAJU,EAKrBhB,qBALqB,CAXzB;AAkBE,MAAA,mBAAmB,EAAE,EAlBvB;AAmBE,MAAA,QAAQ,EAAErG,QAAQ,CAACsH,KAAT,CAAe,CACvB;AACElD,QAAAA,WAAW,EAAE;AACXmD,UAAAA,aAAa,EAAE;AAAEvD,YAAAA,CAAC,EAAE,KAAKP;AAAV;AADJ;AADf,OADuB,CAAf,CAnBZ;AA0BE,MAAA,GAAG,EAAE,KAAKG;AA1BZ,OA4BGtC,MAAM,CAACkG,GAAP,CAAYC,KAAD,IAAc;AACxB,YAAMtF,KAA2C,GAAG;AAClDV,QAAAA,GAAG,EAAEgG,KAAK,CAAChG,GADuC;AAElDyD,QAAAA,QAAQ,EAAEA,QAFwC;AAGlDuC,QAAAA,KAAK,EAAEA,KAH2C;AAIlDpF,QAAAA,eAAe,EAAEA,eAJiC;AAKlDgD,QAAAA,qBAAqB,EAAEA,qBAL2B;AAMlDC,QAAAA,aAAa,EAAEA,aANmC;AAOlDC,QAAAA,YAAY,EAAEA,YAPoC;AAQlDC,QAAAA,SAAS,EAAEA,SARuC;AASlDC,QAAAA,WAAW,EAAEA,WATqC;AAUlDC,QAAAA,UAAU,EAAEA,UAVsC;AAWlDC,QAAAA,WAAW,EAAEA,WAXqC;AAYlDE,QAAAA,WAAW,EAAEA,WAZqC;AAalDC,QAAAA,aAAa,EAAEA,aAbmC;AAclDC,QAAAA,UAAU,EAAEA,UAdsC;AAelDC,QAAAA,YAAY,EAAEA,YAfoC;AAgBlD0B,QAAAA,QAAQ,EAAEnB,cAAc,GACnBpC,CAAD,IAAO;AACL,eAAKwD,iBAAL,CAAuBF,KAAK,CAAChG,GAA7B,IACE0C,CAAC,CAACC,WAAF,CAAczD,MAAd,CAAqBC,KADvB,CADK,CAIL;AACA;;AACA,cACEU,MAAM,CAACuD,KAAP,CACGC,CAAD,IACE,OAAO,KAAK6C,iBAAL,CAAuB7C,CAAC,CAACrD,GAAzB,CAAP,KAAyC,QAF7C,CADF,EAKE;AACA,iBAAK6C,QAAL,CAAc;AACZxD,cAAAA,SAAS,EAAE,EAAE,GAAG,KAAK6G;AAAV;AADC,aAAd;AAGD;AACF,SAjBmB,GAkBpB1G,SAlC8C;AAmClD2G,QAAAA,OAAO,EAAE,MAAM;AACb,gBAAMN,KAAuB,GAAG;AAC9BG,YAAAA,KAD8B;AAE9BI,YAAAA,gBAAgB,EAAE,KAFY;AAG9BC,YAAAA,cAAc,EAAE,MAAM;AACpBR,cAAAA,KAAK,CAACO,gBAAN,GAAyB,IAAzB;AACD;AAL6B,WAAhC;AAQA5B,UAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAGqB,KAAH,CAAV;;AAEA,cAAIA,KAAK,CAACO,gBAAV,EAA4B;AAC1B;AACD;;AAED,eAAK1F,KAAL,CAAWgD,MAAX,CAAkBsC,KAAK,CAAChG,GAAxB;AACD,SAnDiD;AAoDlDsG,QAAAA,WAAW,EAAE,MAAM7B,cAAN,aAAMA,cAAN,uBAAMA,cAAc,CAAG;AAAEuB,UAAAA;AAAF,SAAH,CApDiB;AAqDlDtB,QAAAA,UAAU,EAAEA,UArDsC;AAsDlDjF,QAAAA,KAAK,EAAEC;AAtD2C,OAApD;AAyDA,aAAOyE,gBAAgB,GACrBA,gBAAgB,CAACzD,KAAD,CADK,gBAGrB,oBAAC,UAAD,EAAgBA,KAAhB,CAHF;AAKD,KA/DA,CA5BH,CADF,CAjCF,CADF;AAmID;;AA5ZD;;gBAHmB1B,M,kBAIG;AACpB8E,EAAAA,YAAY,EAAE,CAAC;AAAEkC,IAAAA;AAAF,GAAD,KACZ,OAAOA,KAAK,CAACO,KAAb,KAAuB,QAAvB,GAAkCP,KAAK,CAACO,KAAN,CAAYC,WAAZ,EAAlC,GAA8DR,KAAK,CAACO,KAFlD;AAGpB1C,EAAAA,aAAa,EAAE,CAAC;AAAEmC,IAAAA;AAAF,GAAD,KACb,OAAOA,KAAK,CAACS,UAAb,KAA4B,WAA5B,GAA0CT,KAAK,CAACS,UAAhD,GAA6D,IAJ3C;AAKpB7C,EAAAA,qBAAqB,EAAE,CAAC;AAAEoC,IAAAA;AAAF,GAAD,KACrB,OAAOA,KAAK,CAACU,kBAAb,KAAoC,QAApC,GACIV,KAAK,CAACU,kBADV,GAEI,OAAOV,KAAK,CAACO,KAAb,KAAuB,QAAvB,GACAP,KAAK,CAACO,KADN,GAEA/G,SAVc;AAWpBuE,EAAAA,SAAS,EAAE,CAAC;AAAEiC,IAAAA;AAAF,GAAD,KAA6BA,KAAK,CAACW,MAX1B;AAYpBpB,EAAAA,eAAe,EAAG7E,KAAD,iBACf,oBAAC,eAAD,EAAqBA,KAArB;AAbkB,C;;AA8ZxB,MAAMyE,MAAM,GAAGhH,UAAU,CAACyI,MAAX,CAAkB;AAC/BhB,EAAAA,SAAS,EAAE;AACTiB,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BnB,EAAAA,MAAM,EAAE;AACNoB,IAAAA,QAAQ,EAAExI,QAAQ,CAACyI,MAAT,CAAgB;AAAEC,MAAAA,OAAO,EAAE,QAAX;AAAqBC,MAAAA,GAAG,EAAEzH;AAA1B,KAAhB;AADJ,GAJuB;AAO/B4F,EAAAA,MAAM,EAAE;AACN8B,IAAAA,eAAe,EAAE,SADX;AAENC,IAAAA,SAAS,EAAE,CAFL;AAGNC,IAAAA,WAAW,EAAE,OAHP;AAINC,IAAAA,aAAa,EAAE,GAJT;AAKNC,IAAAA,YAAY,EAAEnJ,UAAU,CAACoJ,aALnB;AAMNC,IAAAA,YAAY,EAAE;AACZpI,MAAAA,MAAM,EAAEjB,UAAU,CAACoJ,aADP;AAEZpI,MAAAA,KAAK,EAAE;AAFK,KANR;AAUNsI,IAAAA,MAAM,EAAE;AAVF,GAPuB;AAmB/B9B,EAAAA,UAAU,EAAE;AACV+B,IAAAA,aAAa,EAAE,KADL;AAEVC,IAAAA,QAAQ,EAAE;AAFA,GAnBmB;AAuB/BtC,EAAAA,kBAAkB,EAAE;AAClB5B,IAAAA,QAAQ,EAAE,UADQ;AAElBmE,IAAAA,GAAG,EAAE,CAFa;AAGlBC,IAAAA,IAAI,EAAE,CAHY;AAIlBC,IAAAA,KAAK,EAAE,CAJW;AAKlBC,IAAAA,MAAM,EAAE;AALU;AAvBW,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  StyleProp,\r\n  ViewStyle,\r\n  TextStyle,\r\n  LayoutChangeEvent,\r\n  I18nManager,\r\n  Platform,\r\n} from 'react-native';\r\nimport Animated from 'react-native-reanimated';\r\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\r\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\r\nimport memoize from './memoize';\r\nimport {\r\n  Route,\r\n  Scene,\r\n  SceneRendererProps,\r\n  NavigationState,\r\n  Layout,\r\n  Event,\r\n} from './types';\r\n\r\nexport type Props<T extends Route> = SceneRendererProps & {\r\n  navigationState: NavigationState<T>;\r\n  scrollEnabled?: boolean;\r\n  bounces?: boolean;\r\n  activeColor?: string;\r\n  inactiveColor?: string;\r\n  pressColor?: string;\r\n  pressOpacity?: number;\r\n  getLabelText: (scene: Scene<T>) => string | undefined;\r\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\r\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\r\n  getTestID: (scene: Scene<T>) => string | undefined;\r\n  renderLabel?: (\r\n    scene: Scene<T> & {\r\n      focused: boolean;\r\n      color: string;\r\n    }\r\n  ) => React.ReactNode;\r\n  renderIcon?: (\r\n    scene: Scene<T> & {\r\n      focused: boolean;\r\n      color: string;\r\n    }\r\n  ) => React.ReactNode;\r\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\r\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\r\n  renderTabBarItem?: (\r\n    props: TabBarItemProps<T> & { key: string }\r\n  ) => React.ReactElement;\r\n  onTabPress?: (scene: Scene<T> & Event) => void;\r\n  onTabLongPress?: (scene: Scene<T>) => void;\r\n  tabStyle?: StyleProp<ViewStyle>;\r\n  indicatorStyle?: StyleProp<ViewStyle>;\r\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\r\n  labelStyle?: StyleProp<TextStyle>;\r\n  contentContainerStyle?: StyleProp<ViewStyle>;\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\ntype State = {\r\n  layout: Layout;\r\n  tabWidths: { [key: string]: number };\r\n};\r\n\r\nconst scheduleInNextFrame = (cb: () => void) => {\r\n  let frame = requestAnimationFrame(() => {\r\n    frame = requestAnimationFrame(cb);\r\n  });\r\n\r\n  return () => cancelAnimationFrame(frame);\r\n};\r\n\r\nexport default class TabBar<T extends Route> extends React.Component<\r\n  Props<T>,\r\n  State\r\n> {\r\n  static defaultProps = {\r\n    getLabelText: ({ route }: Scene<Route>) =>\r\n      typeof route.title === 'string' ? route.title.toUpperCase() : route.title,\r\n    getAccessible: ({ route }: Scene<Route>) =>\r\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\r\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\r\n      typeof route.accessibilityLabel === 'string'\r\n        ? route.accessibilityLabel\r\n        : typeof route.title === 'string'\r\n        ? route.title\r\n        : undefined,\r\n    getTestID: ({ route }: Scene<Route>) => route.testID,\r\n    renderIndicator: (props: IndicatorProps<Route>) => (\r\n      <TabBarIndicator {...props} />\r\n    ),\r\n  };\r\n\r\n  state: State = {\r\n    layout: { width: 0, height: 0 },\r\n    tabWidths: {},\r\n  };\r\n\r\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\r\n    const { navigationState } = this.props;\r\n    const { layout, tabWidths } = this.state;\r\n\r\n    if (\r\n      prevProps.navigationState.routes.length !==\r\n        navigationState.routes.length ||\r\n      prevProps.navigationState.index !== navigationState.index ||\r\n      prevState.layout.width !== layout.width ||\r\n      prevState.tabWidths !== tabWidths\r\n    ) {\r\n      if (\r\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' &&\r\n        !(\r\n          layout.width &&\r\n          navigationState.routes.every(\r\n            (r) => typeof tabWidths[r.key] === 'number'\r\n          )\r\n        )\r\n      ) {\r\n        // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\r\n        return;\r\n      }\r\n\r\n      this.resetScroll(navigationState.index);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.cancelNextFrameCb?.();\r\n  }\r\n\r\n  // to store the layout.width of each tab\r\n  // when all onLayout's are fired, this would be set in state\r\n  private measuredTabWidths: { [key: string]: number } = {};\r\n\r\n  private scrollAmount = new Animated.Value(0);\r\n\r\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\r\n\r\n  private cancelNextFrameCb: (() => void) | undefined = undefined;\r\n\r\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\r\n    const tabStyle = StyleSheet.flatten(style);\r\n\r\n    return tabStyle ? tabStyle.width : undefined;\r\n  };\r\n\r\n  private getComputedTabWidth = (\r\n    index: number,\r\n    layout: Layout,\r\n    routes: Route[],\r\n    scrollEnabled: boolean | undefined,\r\n    tabWidths: { [key: string]: number },\r\n    flattenedWidth: string | number | undefined\r\n  ) => {\r\n    if (flattenedWidth === 'auto') {\r\n      return tabWidths[routes[index].key] || 0;\r\n    }\r\n\r\n    switch (typeof flattenedWidth) {\r\n      case 'number':\r\n        return flattenedWidth;\r\n      case 'string':\r\n        if (flattenedWidth.endsWith('%')) {\r\n          const width = parseFloat(flattenedWidth);\r\n          if (Number.isFinite(width)) {\r\n            return layout.width * (width / 100);\r\n          }\r\n        }\r\n    }\r\n\r\n    if (scrollEnabled) {\r\n      return (layout.width / 5) * 2;\r\n    }\r\n\r\n    return layout.width / routes.length;\r\n  };\r\n\r\n  private getMemoizedTabWidthGettter = memoize(\r\n    (\r\n      layout: Layout,\r\n      routes: Route[],\r\n      scrollEnabled: boolean | undefined,\r\n      tabWidths: { [key: string]: number },\r\n      flattenedWidth: string | number | undefined\r\n    ) => (i: number) =>\r\n      this.getComputedTabWidth(\r\n        i,\r\n        layout,\r\n        routes,\r\n        scrollEnabled,\r\n        tabWidths,\r\n        flattenedWidth\r\n      )\r\n  );\r\n\r\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\r\n    tabBarWidth - layoutWidth;\r\n\r\n  private getTabBarWidth = (props: Props<T>, state: State) => {\r\n    const { layout, tabWidths } = state;\r\n    const { scrollEnabled, tabStyle } = props;\r\n    const { routes } = props.navigationState;\r\n\r\n    return routes.reduce<number>(\r\n      (acc, _, i) =>\r\n        acc +\r\n        this.getComputedTabWidth(\r\n          i,\r\n          layout,\r\n          routes,\r\n          scrollEnabled,\r\n          tabWidths,\r\n          this.getFlattenedTabWidth(tabStyle)\r\n        ),\r\n      0\r\n    );\r\n  };\r\n\r\n  private normalizeScrollValue = (\r\n    props: Props<T>,\r\n    state: State,\r\n    value: number\r\n  ) => {\r\n    const { layout } = state;\r\n    const tabBarWidth = this.getTabBarWidth(props, state);\r\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\r\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\r\n\r\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\r\n      // On Android, scroll value is not applied in reverse in RTL\r\n      // so we need to manually adjust it to apply correct value\r\n      return maxDistance - scrollValue;\r\n    }\r\n\r\n    return scrollValue;\r\n  };\r\n\r\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\r\n    const { layout, tabWidths } = state;\r\n    const { scrollEnabled, tabStyle } = props;\r\n    const { routes } = props.navigationState;\r\n\r\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\r\n      (total, _, i) => {\r\n        const tabWidth = this.getComputedTabWidth(\r\n          i,\r\n          layout,\r\n          routes,\r\n          scrollEnabled,\r\n          tabWidths,\r\n          this.getFlattenedTabWidth(tabStyle)\r\n        );\r\n\r\n        // To get the current index centered we adjust scroll amount by width of indexes\r\n        // 0 through (i - 1) and add half the width of current index i\r\n        return total + (index === i ? tabWidth / 2 : tabWidth);\r\n      },\r\n      0\r\n    );\r\n\r\n    const scrollAmount = centerDistance - layout.width / 2;\r\n\r\n    return this.normalizeScrollValue(props, state, scrollAmount);\r\n  };\r\n\r\n  private resetScroll = (index: number) => {\r\n    if (this.props.scrollEnabled) {\r\n      // getNode() is not necessary in newer versions of React Native\r\n      const scrollView =\r\n        // @ts-ignore\r\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\r\n          ? this.scrollViewRef.current\r\n          : this.scrollViewRef.current?.getNode();\r\n\r\n      // @ts-ignore\r\n      scrollView?.scrollTo({\r\n        x: this.getScrollAmount(this.props, this.state, index),\r\n        animated: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  private handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    if (\r\n      this.state.layout.width === width &&\r\n      this.state.layout.height === height\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // If we don't delay this state update, the UI gets stuck in weird state\r\n    // Maybe an issue in Reanimated?\r\n    // https://github.com/satya164/react-native-tab-view/issues/877\r\n    // Cancel any pending callbacks, since we're scheduling a new one\r\n    this.cancelNextFrameCb?.();\r\n    this.cancelNextFrameCb = scheduleInNextFrame(() =>\r\n      this.setState({\r\n        layout: {\r\n          height,\r\n          width,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  private getTranslateX = memoize(\r\n    (scrollAmount: Animated.Node<number>, maxScrollDistance: number) =>\r\n      Animated.multiply(\r\n        Platform.OS === 'android' && I18nManager.isRTL\r\n          ? Animated.sub(maxScrollDistance, scrollAmount)\r\n          : scrollAmount,\r\n        I18nManager.isRTL ? 1 : -1\r\n      )\r\n  );\r\n\r\n  render() {\r\n    const {\r\n      position,\r\n      navigationState,\r\n      jumpTo,\r\n      scrollEnabled,\r\n      bounces,\r\n      getAccessibilityLabel,\r\n      getAccessible,\r\n      getLabelText,\r\n      getTestID,\r\n      renderBadge,\r\n      renderIcon,\r\n      renderLabel,\r\n      renderTabBarItem,\r\n      activeColor,\r\n      inactiveColor,\r\n      pressColor,\r\n      pressOpacity,\r\n      onTabPress,\r\n      onTabLongPress,\r\n      tabStyle,\r\n      labelStyle,\r\n      indicatorStyle,\r\n      contentContainerStyle,\r\n      style,\r\n      indicatorContainerStyle,\r\n    } = this.props;\r\n    const { layout, tabWidths } = this.state;\r\n    const { routes } = navigationState;\r\n\r\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\r\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\r\n    const tabBarWidthPercent = `${routes.length * 40}%`;\r\n    const translateX = this.getTranslateX(\r\n      this.scrollAmount,\r\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\r\n    );\r\n\r\n    return (\r\n      <Animated.View\r\n        onLayout={this.handleLayout}\r\n        style={[styles.tabBar, style]}\r\n      >\r\n        <Animated.View\r\n          pointerEvents=\"none\"\r\n          style={[\r\n            styles.indicatorContainer,\r\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\r\n            tabBarWidth\r\n              ? { width: tabBarWidth }\r\n              : scrollEnabled\r\n              ? { width: tabBarWidthPercent }\r\n              : null,\r\n            indicatorContainerStyle,\r\n          ]}\r\n        >\r\n          {this.props.renderIndicator({\r\n            position,\r\n            layout,\r\n            navigationState,\r\n            jumpTo,\r\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\r\n            style: indicatorStyle,\r\n            getTabWidth: this.getMemoizedTabWidthGettter(\r\n              layout,\r\n              routes,\r\n              scrollEnabled,\r\n              tabWidths,\r\n              this.getFlattenedTabWidth(tabStyle)\r\n            ),\r\n          })}\r\n        </Animated.View>\r\n        <View style={styles.scroll}>\r\n          <Animated.ScrollView\r\n            horizontal\r\n            accessibilityRole=\"tablist\"\r\n            keyboardShouldPersistTaps=\"handled\"\r\n            scrollEnabled={scrollEnabled}\r\n            bounces={bounces}\r\n            alwaysBounceHorizontal={false}\r\n            scrollsToTop={false}\r\n            showsHorizontalScrollIndicator={false}\r\n            automaticallyAdjustContentInsets={false}\r\n            overScrollMode=\"never\"\r\n            contentContainerStyle={[\r\n              styles.tabContent,\r\n              scrollEnabled\r\n                ? { width: tabBarWidth || tabBarWidthPercent }\r\n                : styles.container,\r\n              contentContainerStyle,\r\n            ]}\r\n            scrollEventThrottle={16}\r\n            onScroll={Animated.event([\r\n              {\r\n                nativeEvent: {\r\n                  contentOffset: { x: this.scrollAmount },\r\n                },\r\n              },\r\n            ])}\r\n            ref={this.scrollViewRef}\r\n          >\r\n            {routes.map((route: T) => {\r\n              const props: TabBarItemProps<T> & { key: string } = {\r\n                key: route.key,\r\n                position: position,\r\n                route: route,\r\n                navigationState: navigationState,\r\n                getAccessibilityLabel: getAccessibilityLabel,\r\n                getAccessible: getAccessible,\r\n                getLabelText: getLabelText,\r\n                getTestID: getTestID,\r\n                renderBadge: renderBadge,\r\n                renderIcon: renderIcon,\r\n                renderLabel: renderLabel,\r\n                activeColor: activeColor,\r\n                inactiveColor: inactiveColor,\r\n                pressColor: pressColor,\r\n                pressOpacity: pressOpacity,\r\n                onLayout: isWidthDynamic\r\n                  ? (e) => {\r\n                      this.measuredTabWidths[route.key] =\r\n                        e.nativeEvent.layout.width;\r\n\r\n                      // When we have measured widths for all of the tabs, we should updates the state\r\n                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\r\n                      if (\r\n                        routes.every(\r\n                          (r) =>\r\n                            typeof this.measuredTabWidths[r.key] === 'number'\r\n                        )\r\n                      ) {\r\n                        this.setState({\r\n                          tabWidths: { ...this.measuredTabWidths },\r\n                        });\r\n                      }\r\n                    }\r\n                  : undefined,\r\n                onPress: () => {\r\n                  const event: Scene<T> & Event = {\r\n                    route,\r\n                    defaultPrevented: false,\r\n                    preventDefault: () => {\r\n                      event.defaultPrevented = true;\r\n                    },\r\n                  };\r\n\r\n                  onTabPress?.(event);\r\n\r\n                  if (event.defaultPrevented) {\r\n                    return;\r\n                  }\r\n\r\n                  this.props.jumpTo(route.key);\r\n                },\r\n                onLongPress: () => onTabLongPress?.({ route }),\r\n                labelStyle: labelStyle,\r\n                style: tabStyle,\r\n              };\r\n\r\n              return renderTabBarItem ? (\r\n                renderTabBarItem(props)\r\n              ) : (\r\n                <TabBarItem {...props} />\r\n              );\r\n            })}\r\n          </Animated.ScrollView>\r\n        </View>\r\n      </Animated.View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  scroll: {\r\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\r\n  },\r\n  tabBar: {\r\n    backgroundColor: '#2196f3',\r\n    elevation: 4,\r\n    shadowColor: 'black',\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: StyleSheet.hairlineWidth,\r\n    shadowOffset: {\r\n      height: StyleSheet.hairlineWidth,\r\n      width: 0,\r\n    },\r\n    zIndex: 1,\r\n  },\r\n  tabContent: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'nowrap',\r\n  },\r\n  indicatorContainer: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n  },\r\n});\r\n"]}