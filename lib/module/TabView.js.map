{"version":3,"sources":["TabView.tsx"],"names":["React","StyleSheet","View","GestureHandlerRootView","Animated","TabBar","SceneView","Pager","GestureHandlerWrapper","TabView","Component","layout","width","height","props","initialLayout","index","navigationState","onIndexChange","e","nativeEvent","state","setState","render","position","positionListener","onSwipeStart","onSwipeEnd","lazy","lazyPreloadDistance","removeClippedSubviews","keyboardDismissMode","swipeEnabled","swipeVelocityImpact","timingConfig","springConfig","tabBarPosition","renderTabBar","renderScene","renderLazyPlaceholder","sceneContainerStyle","style","gestureHandlerProps","springVelocityScale","renderPager","handleLayout","styles","pager","jumpToIndex","children","addListener","removeListener","jumpTo","sceneRendererProps","set","routes","map","route","i","key","loading","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  StyleProp,\r\n  ViewStyle,\r\n  LayoutChangeEvent,\r\n} from 'react-native';\r\nimport {\r\n  PanGestureHandler,\r\n  GestureHandlerRootView,\r\n} from 'react-native-gesture-handler';\r\nimport Animated from 'react-native-reanimated';\r\nimport TabBar, { Props as TabBarProps } from './TabBar';\r\nimport SceneView from './SceneView';\r\nimport {\r\n  Layout,\r\n  NavigationState,\r\n  Route,\r\n  SceneRendererProps,\r\n  PagerCommonProps,\r\n} from './types';\r\nimport Pager, { Props as ChildProps } from './Pager';\r\n\r\nexport type Props<T extends Route> = PagerCommonProps & {\r\n  position?: Animated.Value<number>;\r\n  onIndexChange: (index: number) => void;\r\n  navigationState: NavigationState<T>;\r\n  renderScene: (\r\n    props: SceneRendererProps & {\r\n      route: T;\r\n    }\r\n  ) => React.ReactNode;\r\n  renderLazyPlaceholder: (props: { route: T }) => React.ReactNode;\r\n  renderTabBar: (\r\n    props: SceneRendererProps & {\r\n      navigationState: NavigationState<T>;\r\n    }\r\n  ) => React.ReactNode;\r\n  tabBarPosition: 'top' | 'bottom';\r\n  initialLayout?: { width?: number; height?: number };\r\n  lazy: boolean;\r\n  lazyPreloadDistance: number;\r\n  removeClippedSubviews?: boolean;\r\n  sceneContainerStyle?: StyleProp<ViewStyle>;\r\n  style?: StyleProp<ViewStyle>;\r\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\r\n  renderPager: (props: ChildProps<T>) => React.ReactNode;\r\n};\r\n\r\ntype State = {\r\n  layout: Layout;\r\n};\r\n\r\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\r\n\r\nexport default class TabView<T extends Route> extends React.Component<\r\n  Props<T>,\r\n  State\r\n> {\r\n  static defaultProps = {\r\n    tabBarPosition: 'top',\r\n    renderTabBar: <P extends Route>(props: TabBarProps<P>) => (\r\n      <TabBar {...props} />\r\n    ),\r\n    renderLazyPlaceholder: () => null,\r\n    keyboardDismissMode: 'auto',\r\n    swipeEnabled: true,\r\n    lazy: false,\r\n    lazyPreloadDistance: 0,\r\n    removeClippedSubviews: false,\r\n    springConfig: {},\r\n    timingConfig: {},\r\n    gestureHandlerProps: {},\r\n    renderPager: (props: ChildProps<any>) => <Pager {...props} />,\r\n  };\r\n\r\n  state = {\r\n    layout: { width: 0, height: 0, ...this.props.initialLayout },\r\n  };\r\n\r\n  private jumpToIndex = (index: number) => {\r\n    if (index !== this.props.navigationState.index) {\r\n      this.props.onIndexChange(index);\r\n    }\r\n  };\r\n\r\n  private handleLayout = (e: LayoutChangeEvent) => {\r\n    const { height, width } = e.nativeEvent.layout;\r\n\r\n    if (\r\n      this.state.layout.width === width &&\r\n      this.state.layout.height === height\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      layout: {\r\n        height,\r\n        width,\r\n      },\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      position: positionListener,\r\n      onSwipeStart,\r\n      onSwipeEnd,\r\n      navigationState,\r\n      lazy,\r\n      lazyPreloadDistance,\r\n      removeClippedSubviews,\r\n      keyboardDismissMode,\r\n      swipeEnabled,\r\n      swipeVelocityImpact,\r\n      timingConfig,\r\n      springConfig,\r\n      tabBarPosition,\r\n      renderTabBar,\r\n      renderScene,\r\n      renderLazyPlaceholder,\r\n      sceneContainerStyle,\r\n      style,\r\n      gestureHandlerProps,\r\n      springVelocityScale,\r\n      renderPager,\r\n    } = this.props;\r\n    const { layout } = this.state;\r\n\r\n    return (\r\n      <GestureHandlerWrapper\r\n        onLayout={this.handleLayout}\r\n        style={[styles.pager, style]}\r\n      >\r\n        {renderPager({\r\n          navigationState,\r\n          layout,\r\n          keyboardDismissMode,\r\n          swipeEnabled,\r\n          swipeVelocityImpact,\r\n          timingConfig,\r\n          springConfig,\r\n          onSwipeStart,\r\n          onSwipeEnd,\r\n          onIndexChange: this.jumpToIndex,\r\n          springVelocityScale,\r\n          removeClippedSubviews,\r\n          gestureHandlerProps,\r\n          children: ({\r\n            position,\r\n            render,\r\n            addListener,\r\n            removeListener,\r\n            jumpTo,\r\n          }) => {\r\n            // All of the props here must not change between re-renders\r\n            // This is crucial to optimizing the routes with PureComponent\r\n            const sceneRendererProps = {\r\n              position,\r\n              layout,\r\n              jumpTo,\r\n            };\r\n\r\n            return (\r\n              <React.Fragment>\r\n                {positionListener ? (\r\n                  <Animated.Code\r\n                    exec={Animated.set(positionListener, position)}\r\n                  />\r\n                ) : null}\r\n                {tabBarPosition === 'top' &&\r\n                  renderTabBar({\r\n                    ...sceneRendererProps,\r\n                    navigationState,\r\n                  })}\r\n                {render(\r\n                  navigationState.routes.map((route, i) => {\r\n                    return (\r\n                      <SceneView\r\n                        {...sceneRendererProps}\r\n                        addListener={addListener}\r\n                        removeListener={removeListener}\r\n                        key={route.key}\r\n                        index={i}\r\n                        lazy={lazy}\r\n                        lazyPreloadDistance={lazyPreloadDistance}\r\n                        navigationState={navigationState}\r\n                        style={sceneContainerStyle}\r\n                      >\r\n                        {({ loading }) =>\r\n                          loading\r\n                            ? renderLazyPlaceholder({ route })\r\n                            : renderScene({\r\n                                ...sceneRendererProps,\r\n                                route,\r\n                              })\r\n                        }\r\n                      </SceneView>\r\n                    );\r\n                  })\r\n                )}\r\n                {tabBarPosition === 'bottom' &&\r\n                  renderTabBar({\r\n                    ...sceneRendererProps,\r\n                    navigationState,\r\n                  })}\r\n              </React.Fragment>\r\n            );\r\n          },\r\n        })}\r\n      </GestureHandlerWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  pager: {\r\n    flex: 1,\r\n    overflow: 'hidden',\r\n  },\r\n});\r\n"]}