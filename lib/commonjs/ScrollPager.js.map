{"version":3,"sources":["ScrollPager.tsx"],"names":["event","divide","onChange","cond","eq","round","call","Value","Animated","ScrollPager","React","Component","x","props","navigationState","index","layout","width","y","createRef","key","wasTouched","keyboardDismissMode","onIndexChange","routes","findIndex","route","scrollTo","Keyboard","dismiss","animated","scrollViewRef","current","scrollView","getNode","type","listener","enterListeners","push","indexOf","splice","nativeEvent","contentOffset","position","layoutWidthNode","componentDidMount","componentDidUpdate","prevProps","offset","length","setValue","componentWillUnmount","interactionHandle","InteractionManager","clearInteractionHandle","render","children","onSwipeStart","onSwipeEnd","overscroll","handleSwipeStart","createInteractionHandle","handleSwipeEnd","relativePosition","addListener","removeListener","jumpTo","swipeEnabled","onScroll","initialOffset","styles","container","flexDirection","flex","bounces","StyleSheet","create"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAIA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,IAA3B;AAAiCC,EAAAA,EAAjC;AAAqCC,EAAAA,KAArC;AAA4CC,EAAAA,IAA5C;AAAkDC,EAAAA;AAAlD,IAA4DC,8BAAlE;;AAMe,MAAMC,WAAN,SAA2CC,KAAK,CAACC,SAAjD,CAGb;AAAA;AAAA;;AAAA,2CAwCwB;AACtBC,MAAAA,CAAC,EAAE,KAAKC,KAAL,CAAWC,eAAX,CAA2BC,KAA3B,GAAmC,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,KADlC;AAEtBC,MAAAA,CAAC,EAAE;AAFmB,KAxCxB;;AAAA,wCA6C8B,KA7C9B;;AAAA,+CAgD2C,IAhD3C;;AAAA,wDAkDwBR,KAAK,CAACS,SAAN,EAlDxB;;AAAA,oCAoDkBC,GAAD,IAAiB;AAChC,WAAKC,UAAL,GAAkB,KAAlB;AACA,YAAM;AAAEP,QAAAA,eAAF;AAAmBQ,QAAAA,mBAAnB;AAAwCC,QAAAA;AAAxC,UAA0D,KAAKV,KAArE;AAEA,YAAME,KAAK,GAAGD,eAAe,CAACU,MAAhB,CAAuBC,SAAvB,CACXC,KAAD,IAAWA,KAAK,CAACN,GAAN,KAAcA,GADb,CAAd;;AAIA,UAAIN,eAAe,CAACC,KAAhB,KAA0BA,KAA9B,EAAqC;AACnC,aAAKY,QAAL,CAAcZ,KAAK,GAAG,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,KAAxC;AACD,OAFD,MAEO;AACLM,QAAAA,aAAa,CAACR,KAAD,CAAb;;AACA,YAAIO,mBAAmB,KAAK,MAA5B,EAAoC;AAClCM,gCAASC,OAAT;AACD;AACF;AACF,KApED;;AAAA,sCAsEmB,CAACjB,CAAD,EAAYkB,QAAQ,GAAG,IAAvB,KAAgC;AACjD,UAAI,KAAKC,aAAL,CAAmBC,OAAvB,EAAgC;AAAA;;AAC9B;AACA,cAAMC,UAAU,GACd;AACA,yCAAO,KAAKF,aAAL,CAAmBC,OAA1B,0DAAO,sBAA4BL,QAAnC,MAAgD,UAAhD,GACI,KAAKI,aAAL,CAAmBC,OADvB,6BAEI,KAAKD,aAAL,CAAmBC,OAFvB,2DAEI,uBAA4BE,OAA5B,EAJN,CAF8B,CAQ9B;;AACAD,QAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEN,QAAZ,CAAqB;AACnBf,UAAAA,CADmB;AAEnBkB,UAAAA,QAAQ,EAAEA;AAFS,SAArB;AAID;AACF,KArFD;;AAAA,4CAuFqC,EAvFrC;;AAAA,yCAyFsB,CAACK,IAAD,EAAgBC,QAAhB,KAAuC;AAC3D,cAAQD,IAAR;AACE,aAAK,OAAL;AACE,eAAKE,cAAL,CAAoBC,IAApB,CAAyBF,QAAzB;AACA;AAHJ;AAKD,KA/FD;;AAAA,4CAiGyB,CAACD,IAAD,EAAgBC,QAAhB,KAAuC;AAC9D,cAAQD,IAAR;AACE,aAAK,OAAL;AAAc;AACZ,kBAAMpB,KAAK,GAAG,KAAKsB,cAAL,CAAoBE,OAApB,CAA4BH,QAA5B,CAAd;;AAEA,gBAAIrB,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,mBAAKsB,cAAL,CAAoBG,MAApB,CAA2BzB,KAA3B,EAAkC,CAAlC;AACD;;AAED;AACD;AATH;AAWD,KA7GD;;AAAA,sCA+GmB,IAAIP,+BAASD,KAAb,CACjB,KAAKM,KAAL,CAAWC,eAAX,CAA2BC,KAA3B,GAAmC,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,KADpC,CA/GnB;;AAAA,sCAmHmBjB,KAAK,CAAC,CACvB;AACEyC,MAAAA,WAAW,EAAE;AACXC,QAAAA,aAAa,EAAE;AACb9B,UAAAA,CAAC,EAAE,KAAK+B;AADK;AADJ;AADf,KADuB,CAAD,CAnHxB;;AAAA,6CA6H0B,IAAIpC,KAAJ,CAAU,KAAKM,KAAL,CAAWG,MAAX,CAAkBC,KAA5B,CA7H1B;;AAAA,8CA+H2BhB,MAAM,CAAC,KAAK0C,QAAN,EAAgB,KAAKC,eAArB,CA/HjC;AAAA;;AAKAC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,KAAKhC,KAAL,CAAWG,MAAX,CAAkBC,KAAtB,EAA6B;AAC3B,WAAKU,QAAL,CACE,KAAKd,KAAL,CAAWC,eAAX,CAA2BC,KAA3B,GAAmC,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,KADvD,EAEE,KAFF;AAID;AACF;;AAED6B,EAAAA,kBAAkB,CAACC,SAAD,EAAsB;AACtC,UAAMC,MAAM,GAAG,KAAKnC,KAAL,CAAWC,eAAX,CAA2BC,KAA3B,GAAmC,KAAKF,KAAL,CAAWG,MAAX,CAAkBC,KAApE;;AAEA,QACE8B,SAAS,CAACjC,eAAV,CAA0BU,MAA1B,CAAiCyB,MAAjC,KACE,KAAKpC,KAAL,CAAWC,eAAX,CAA2BU,MAA3B,CAAkCyB,MADpC,IAEAF,SAAS,CAAC/B,MAAV,CAAiBC,KAAjB,KAA2B,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,KAH/C,EAIE;AACA,WAAKU,QAAL,CAAcqB,MAAd,EAAsB,KAAtB;AACD,KAND,MAMO,IACLD,SAAS,CAACjC,eAAV,CAA0BC,KAA1B,KAAoC,KAAKF,KAAL,CAAWC,eAAX,CAA2BC,KAD1D,EAEL;AACA,WAAKY,QAAL,CAAcqB,MAAd;AACD;;AAED,QAAID,SAAS,CAAC/B,MAAV,CAAiBC,KAAjB,KAA2B,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,KAAjD,EAAwD;AACtD,WAAK2B,eAAL,CAAqBM,QAArB,CAA8B,KAAKrC,KAAL,CAAWG,MAAX,CAAkBC,KAAhD;AACD;AACF;;AAEDkC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKC,iBAAL,KAA2B,IAA/B,EAAqC;AACnCC,sCAAmBC,sBAAnB,CAA0C,KAAKF,iBAA/C;AACD;AACF;;AA2FDG,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,QADI;AAEJxC,MAAAA,MAFI;AAGJyC,MAAAA,YAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,UALI;AAMJpC,MAAAA,aANI;AAOJT,MAAAA;AAPI,QAQF,KAAKD,KART;;AAUA,UAAM+C,gBAAgB,GAAG,MAAM;AAC7B,WAAKvC,UAAL,GAAkB,KAAlB;AACAoC,MAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY;AACZ,WAAKL,iBAAL,GAAyBC,gCAAmBQ,uBAAnB,EAAzB;AACD,KAJD;;AAMA,UAAMC,cAAc,GAAG,MAAM;AAC3B,WAAKzC,UAAL,GAAkB,IAAlB;AACAqC,MAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU;;AACV,UAAI,KAAKN,iBAAL,KAA2B,IAA/B,EAAqC;AACnCC,wCAAmBC,sBAAnB,CAA0C,KAAKF,iBAA/C;AACD;AACF,KAND;;AAQA,WAAOI,QAAQ,CAAC;AACdb,MAAAA,QAAQ,EAAE,KAAKoB,gBADD;AAEdC,MAAAA,WAAW,EAAE,KAAKA,WAFJ;AAGdC,MAAAA,cAAc,EAAE,KAAKA,cAHP;AAIdC,MAAAA,MAAM,EAAE,KAAKA,MAJC;AAKdX,MAAAA,MAAM,EAAGC,QAAD,iBACN,oBAAC,8BAAD,CAAU,UAAV;AACE,QAAA,aAAa,MADf;AAEE,QAAA,sBAAsB,MAFxB;AAGE,QAAA,mBAAmB,EAAC,SAHtB;AAIE,QAAA,yBAAyB,EAAC,QAJ5B;AAKE,QAAA,cAAc,EAAC,OALjB;AAME,QAAA,uBAAuB,MANzB;AAOE,QAAA,aAAa,EAAE,KAAK3C,KAAL,CAAWsD,YAP5B;AAQE,QAAA,gCAAgC,EAAE,KARpC;AASE,QAAA,OAAO,EAAER,UATX;AAUE,QAAA,YAAY,EAAE,KAVhB;AAWE,QAAA,8BAA8B,EAAE,KAXlC;AAYE,QAAA,mBAAmB,EAAE,CAZvB;AAaE,QAAA,QAAQ,EAAE,KAAKS,QAbjB;AAcE,QAAA,iBAAiB,EAAER,gBAdrB;AAeE,QAAA,eAAe,EAAEE,cAfnB;AAgBE,QAAA,mBAAmB,EAAE,KAAKM,QAhB5B;AAiBE,QAAA,aAAa,EAAE,KAAKC,aAjBtB;AAkBE,QAAA,KAAK,EAAEC,MAAM,CAACC,SAlBhB;AAmBE,QAAA,qBAAqB,EACnBvD,MAAM,CAACC,KAAP,GACI;AACEuD,UAAAA,aAAa,EAAE,KADjB;AAEEvD,UAAAA,KAAK,EAAED,MAAM,CAACC,KAAP,GAAeH,eAAe,CAACU,MAAhB,CAAuByB,MAF/C;AAGEwB,UAAAA,IAAI,EAAE;AAHR,SADJ,GAMI,IA1BR;AA4BE,QAAA,GAAG,EAAE,KAAK1C;AA5BZ,SA8BGyB,QA9BH,eA+BE,oBAAC,8BAAD,CAAU,IAAV;AACE,QAAA,IAAI,EAAEtD,QAAQ,CACZ,KAAK6D,gBADO,EAEZ5D,IAAI,CAACC,EAAE,CAACC,KAAK,CAAC,KAAK0D,gBAAN,CAAN,EAA+B,KAAKA,gBAApC,CAAH,EAA0D,CAC5DzD,IAAI,CAAC,CAAC,KAAKyD,gBAAN,CAAD,EAA0B,CAAC,CAACA,gBAAD,CAAD,KAAwB;AACpD,cAAI,KAAK1C,UAAT,EAAqB;AACnBE,YAAAA,aAAa,CAACwC,gBAAD,CAAb;AACA,iBAAK1C,UAAL,GAAkB,KAAlB;AACD;AACF,SALG,CADwD,CAA1D,CAFQ;AADhB,QA/BF;AANY,KAAD,CAAf;AAqDD;;AA/MD;;;;gBAHmBZ,W,kBAIG;AACpBiE,EAAAA,OAAO,EAAE;AADW,C;;AAiNxB,MAAMJ,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTE,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\r\nimport { StyleSheet, Keyboard, InteractionManager } from 'react-native';\r\nimport Animated from 'react-native-reanimated';\r\nimport { Props } from './Pager';\r\nimport { Route, Listener } from './types';\r\n\r\nconst { event, divide, onChange, cond, eq, round, call, Value } = Animated;\r\n\r\ntype State = {\r\n  initialOffset: { x: number; y: number };\r\n};\r\n\r\nexport default class ScrollPager<T extends Route> extends React.Component<\r\n  Props<T> & { overscroll?: boolean },\r\n  State\r\n> {\r\n  static defaultProps = {\r\n    bounces: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.layout.width) {\r\n      this.scrollTo(\r\n        this.props.navigationState.index * this.props.layout.width,\r\n        false\r\n      );\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props<T>) {\r\n    const offset = this.props.navigationState.index * this.props.layout.width;\r\n\r\n    if (\r\n      prevProps.navigationState.routes.length !==\r\n        this.props.navigationState.routes.length ||\r\n      prevProps.layout.width !== this.props.layout.width\r\n    ) {\r\n      this.scrollTo(offset, false);\r\n    } else if (\r\n      prevProps.navigationState.index !== this.props.navigationState.index\r\n    ) {\r\n      this.scrollTo(offset);\r\n    }\r\n\r\n    if (prevProps.layout.width !== this.props.layout.width) {\r\n      this.layoutWidthNode.setValue(this.props.layout.width);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.interactionHandle !== null) {\r\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\r\n    }\r\n  }\r\n\r\n  private initialOffset = {\r\n    x: this.props.navigationState.index * this.props.layout.width,\r\n    y: 0,\r\n  };\r\n\r\n  private wasTouched: boolean = false;\r\n\r\n  // InteractionHandle to handle tasks around animations\r\n  private interactionHandle: number | null = null;\r\n\r\n  private scrollViewRef = React.createRef<Animated.ScrollView>();\r\n\r\n  private jumpTo = (key: string) => {\r\n    this.wasTouched = false;\r\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\r\n\r\n    const index = navigationState.routes.findIndex(\r\n      (route) => route.key === key\r\n    );\r\n\r\n    if (navigationState.index === index) {\r\n      this.scrollTo(index * this.props.layout.width);\r\n    } else {\r\n      onIndexChange(index);\r\n      if (keyboardDismissMode === 'auto') {\r\n        Keyboard.dismiss();\r\n      }\r\n    }\r\n  };\r\n\r\n  private scrollTo = (x: number, animated = true) => {\r\n    if (this.scrollViewRef.current) {\r\n      // getNode() is not necessary in newer versions of React Native\r\n      const scrollView =\r\n        // @ts-ignore\r\n        typeof this.scrollViewRef.current?.scrollTo === 'function'\r\n          ? this.scrollViewRef.current\r\n          : this.scrollViewRef.current?.getNode();\r\n\r\n      // @ts-ignore\r\n      scrollView?.scrollTo({\r\n        x,\r\n        animated: animated,\r\n      });\r\n    }\r\n  };\r\n\r\n  private enterListeners: Listener[] = [];\r\n\r\n  private addListener = (type: 'enter', listener: Listener) => {\r\n    switch (type) {\r\n      case 'enter':\r\n        this.enterListeners.push(listener);\r\n        break;\r\n    }\r\n  };\r\n\r\n  private removeListener = (type: 'enter', listener: Listener) => {\r\n    switch (type) {\r\n      case 'enter': {\r\n        const index = this.enterListeners.indexOf(listener);\r\n\r\n        if (index > -1) {\r\n          this.enterListeners.splice(index, 1);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  private position = new Animated.Value(\r\n    this.props.navigationState.index * this.props.layout.width\r\n  );\r\n\r\n  private onScroll = event([\r\n    {\r\n      nativeEvent: {\r\n        contentOffset: {\r\n          x: this.position,\r\n        },\r\n      },\r\n    },\r\n  ]);\r\n\r\n  private layoutWidthNode = new Value(this.props.layout.width);\r\n\r\n  private relativePosition = divide(this.position, this.layoutWidthNode);\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      layout,\r\n      onSwipeStart,\r\n      onSwipeEnd,\r\n      overscroll,\r\n      onIndexChange,\r\n      navigationState,\r\n    } = this.props;\r\n\r\n    const handleSwipeStart = () => {\r\n      this.wasTouched = false;\r\n      onSwipeStart?.();\r\n      this.interactionHandle = InteractionManager.createInteractionHandle();\r\n    };\r\n\r\n    const handleSwipeEnd = () => {\r\n      this.wasTouched = true;\r\n      onSwipeEnd?.();\r\n      if (this.interactionHandle !== null) {\r\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\r\n      }\r\n    };\r\n\r\n    return children({\r\n      position: this.relativePosition,\r\n      addListener: this.addListener,\r\n      removeListener: this.removeListener,\r\n      jumpTo: this.jumpTo,\r\n      render: (children) => (\r\n        <Animated.ScrollView\r\n          pagingEnabled\r\n          directionalLockEnabled\r\n          keyboardDismissMode=\"on-drag\"\r\n          keyboardShouldPersistTaps=\"always\"\r\n          overScrollMode=\"never\"\r\n          scrollToOverflowEnabled\r\n          scrollEnabled={this.props.swipeEnabled}\r\n          automaticallyAdjustContentInsets={false}\r\n          bounces={overscroll}\r\n          scrollsToTop={false}\r\n          showsHorizontalScrollIndicator={false}\r\n          scrollEventThrottle={1}\r\n          onScroll={this.onScroll}\r\n          onScrollBeginDrag={handleSwipeStart}\r\n          onScrollEndDrag={handleSwipeEnd}\r\n          onMomentumScrollEnd={this.onScroll}\r\n          contentOffset={this.initialOffset}\r\n          style={styles.container}\r\n          contentContainerStyle={\r\n            layout.width\r\n              ? {\r\n                  flexDirection: 'row',\r\n                  width: layout.width * navigationState.routes.length,\r\n                  flex: 1,\r\n                }\r\n              : null\r\n          }\r\n          ref={this.scrollViewRef}\r\n        >\r\n          {children}\r\n          <Animated.Code\r\n            exec={onChange(\r\n              this.relativePosition,\r\n              cond(eq(round(this.relativePosition), this.relativePosition), [\r\n                call([this.relativePosition], ([relativePosition]) => {\r\n                  if (this.wasTouched) {\r\n                    onIndexChange(relativePosition);\r\n                    this.wasTouched = false;\r\n                  }\r\n                }),\r\n              ])\r\n            )}\r\n          />\r\n        </Animated.ScrollView>\r\n      ),\r\n    });\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n});\r\n"]}