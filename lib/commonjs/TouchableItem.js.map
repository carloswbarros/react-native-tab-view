{"version":3,"sources":["TouchableItem.tsx"],"names":["LOLLIPOP","TouchableItem","React","Component","render","style","pressOpacity","pressColor","borderless","children","rest","props","Platform","OS","Version","TouchableNativeFeedback","Ripple","Children","only"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAqBA,MAAMA,QAAQ,GAAG,EAAjB;;AAEe,MAAMC,aAAN,SAA4BC,KAAK,CAACC,SAAlC,CAAmD;AAKhEC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,YAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,QALI;AAMJ,SAAGC;AANC,QAOF,KAAKC,KAPT;;AASA,QAAIC,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBd,QAArD,EAA+D;AAC7D,0BACE,oBAAC,oCAAD,eACMU,IADN;AAEE,QAAA,UAAU,EAAEK,qCAAwBC,MAAxB,CAA+BT,UAA/B,EAA2CC,UAA3C;AAFd,uBAIE,oBAAC,iBAAD;AAAM,QAAA,KAAK,EAAEH;AAAb,SAAqBH,KAAK,CAACe,QAAN,CAAeC,IAAf,CAAoBT,QAApB,CAArB,CAJF,CADF;AAQD,KATD,MASO;AACL,0BACE,oBAAC,6BAAD,eAAsBC,IAAtB;AAA4B,QAAA,KAAK,EAAEL,KAAnC;AAA0C,QAAA,aAAa,EAAEC;AAAzD,UACGG,QADH,CADF;AAKD;AACF;;AA/B+D;;;;gBAA7CR,a,kBACG;AACpBM,EAAAA,UAAU,EAAE;AADQ,C","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  TouchableNativeFeedback,\r\n  TouchableOpacity,\r\n  Platform,\r\n  View,\r\n  StyleProp,\r\n  ViewStyle,\r\n  ViewProps,\r\n} from 'react-native';\r\n\r\ntype Props = ViewProps & {\r\n  onPress: () => void;\r\n  onLongPress?: () => void;\r\n  delayPressIn?: number;\r\n  borderless?: boolean;\r\n  pressColor: string;\r\n  pressOpacity?: number;\r\n  children?: React.ReactNode;\r\n  style?: StyleProp<ViewStyle>;\r\n};\r\n\r\nconst LOLLIPOP = 21;\r\n\r\nexport default class TouchableItem extends React.Component<Props> {\r\n  static defaultProps = {\r\n    pressColor: 'rgba(255, 255, 255, .4)',\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      style,\r\n      pressOpacity,\r\n      pressColor,\r\n      borderless,\r\n      children,\r\n      ...rest\r\n    } = this.props;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\r\n      return (\r\n        <TouchableNativeFeedback\r\n          {...rest}\r\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\r\n        >\r\n          <View style={style}>{React.Children.only(children)}</View>\r\n        </TouchableNativeFeedback>\r\n      );\r\n    } else {\r\n      return (\r\n        <TouchableOpacity {...rest} style={style} activeOpacity={pressOpacity}>\r\n          {children}\r\n        </TouchableOpacity>\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}