{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","React","Component","loading","Math","abs","props","navigationState","index","lazyPreloadDistance","value","state","setState","getDerivedStateFromProps","componentDidMount","lazy","addListener","handleEnter","setTimeout","componentDidUpdate","prevProps","prevState","removeListener","componentWillUnmount","render","layout","style","focused","styles","route","width","StyleSheet","absoluteFill","children","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\r\nimport {\r\n  SceneRendererProps,\r\n  EventEmitterProps,\r\n  NavigationState,\r\n  Route,\r\n} from './types';\r\n\r\ntype Props<T extends Route> = SceneRendererProps &\r\n  EventEmitterProps & {\r\n    navigationState: NavigationState<T>;\r\n    lazy: boolean;\r\n    lazyPreloadDistance: number;\r\n    index: number;\r\n    children: (props: { loading: boolean }) => React.ReactNode;\r\n    style?: StyleProp<ViewStyle>;\r\n  };\r\n\r\ntype State = {\r\n  loading: boolean;\r\n};\r\n\r\nexport default class SceneView<T extends Route> extends React.Component<\r\n  Props<T>,\r\n  State\r\n> {\r\n  static getDerivedStateFromProps(props: Props<Route>, state: State) {\r\n    if (\r\n      state.loading &&\r\n      Math.abs(props.navigationState.index - props.index) <=\r\n        props.lazyPreloadDistance\r\n    ) {\r\n      // Always render the route when it becomes focused\r\n      return { loading: false };\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  state = {\r\n    loading:\r\n      Math.abs(this.props.navigationState.index - this.props.index) >\r\n      this.props.lazyPreloadDistance,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.lazy) {\r\n      // If lazy mode is enabled, listen to when we enter screens\r\n      this.props.addListener('enter', this.handleEnter);\r\n    } else if (this.state.loading) {\r\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\r\n      // This improves the initial startup time as the scene is no longer blocking\r\n      setTimeout(() => this.setState({ loading: false }), 0);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\r\n    if (\r\n      this.props.lazy !== prevProps.lazy ||\r\n      this.state.loading !== prevState.loading\r\n    ) {\r\n      // We only need the listener if the tab hasn't loaded yet and lazy is enabled\r\n      if (this.props.lazy && this.state.loading) {\r\n        this.props.addListener('enter', this.handleEnter);\r\n      } else {\r\n        this.props.removeListener('enter', this.handleEnter);\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.removeListener('enter', this.handleEnter);\r\n  }\r\n\r\n  private handleEnter = (value: number) => {\r\n    const { index } = this.props;\r\n\r\n    // If we're entering the current route, we need to load it\r\n    if (value === index && this.state.loading) {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { navigationState, index, layout, style } = this.props;\r\n    const { loading } = this.state;\r\n\r\n    const focused = navigationState.index === index;\r\n\r\n    return (\r\n      <View\r\n        accessibilityElementsHidden={!focused}\r\n        importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\r\n        style={[\r\n          styles.route,\r\n          // If we don't have the layout yet, make the focused screen fill the container\r\n          // This avoids delay before we are able to render pages side by side\r\n          layout.width\r\n            ? { width: layout.width }\r\n            : focused\r\n            ? StyleSheet.absoluteFill\r\n            : null,\r\n          style,\r\n        ]}\r\n      >\r\n        {\r\n          // Only render the route only if it's either focused or layout is available\r\n          // When layout is not available, we must not render unfocused routes\r\n          // so that the focused route can fill the screen\r\n          focused || layout.width ? this.props.children({ loading }) : null\r\n        }\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  route: {\r\n    flex: 1,\r\n    overflow: 'hidden',\r\n  },\r\n});\r\n"]}